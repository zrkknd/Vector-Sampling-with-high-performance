import unittest
from itertools import combinations
from scipy.special import comb
from CombVectorSample import CombVectorCalc,CombVectorSample

class TestMyClass(unittest.TestCase):
	def setUp(self):
		self.comb_range = 6
		self.cv_calc = CombVectorCalc()
		self.cv_sample = CombVectorSample()
	def tearDown(self):
		del self.cv_calc
		del self.cv_sample
		
	# @unittest.skip("I don't want to run this case.")
	def test_vector_calculate(self):
		"""
		combination range number: 6
		combination selection number: 0 to 6
		cb is combination vector generated by itertools.combinations function
		"""
		for i in range(0, self.comb_range + 1):
			pos = 0
			for cb in combinations(range(self.comb_range), i):
				pos += 1
				self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, i, pos), cb)
				
	# @unittest.skip("I don't want to run this case.")
	def test_vector_calc_raises_value_error(self):
		with self.assertRaises(ValueError):
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, 1, 0), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, 1, 7), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, self.comb_range, 2), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, 3, -1), [1]) 
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, self.comb_range, 2), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, -1, 2), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, self.comb_range + 1, 2), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(-self.comb_range, self.comb_range + 1, 2), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(0, self.comb_range + 1, 2), [1])
	
	# @unittest.skip("I don't want to run this case.")
	def test_vector_calc_raises_type_error(self):
		with self.assertRaises(TypeError): 
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, 1, "0"), [1])
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, 1, (1,)), [1]) 
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, 1, [1]), [1])   
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, 1, {'key':1}), [1]) 
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, "1", 1), [1])     
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, (1,), 1), [1])   
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, [1], 1), [1])    
			self.assertEqual(self.cv_calc.Get_comb_vector(self.comb_range, {'key': 1}, 1), [1])    
			self.assertEqual(self.cv_calc.Get_comb_vector("6", 1, 1), [1])   
			self.assertEqual(self.cv_calc.Get_comb_vector((6,), 1, 1), [1])     
			self.assertEqual(self.cv_calc.Get_comb_vector([6], 1, 1), [1])    
			self.assertEqual(self.cv_calc.Get_comb_vector({'key': 6}, 1, 1), [1])  
	
	# @unittest.skip("I don't want to run this case.")  
	def test_vectors_sample(self):  
		for i in range(1,7):   
			j = int(comb(self.comb_range, i))     
			self.assertTrue(set(self.cv_sample.Sample_comb_vectors(self.comb_range, i, j)).issubset(list(combinations(range(self.comb_range), i)))) 
			
	# @unittest.skip("I don't want to run this case.") 
	def test_vectors_sample_value_error(self): 
		with self.assertRaises(ValueError):  
			self.cv_sample.Sample_comb_vectors(-self.comb_range)   
			self.cv_sample.Sample_comb_vectors(0)      
			self.cv_sample.Sample_comb_vectors(self.comb_range,0 )    
			self.cv_sample.Sample_comb_vectors(self.comb_range,-1)     
			self.cv_sample.Sample_comb_vectors(self.comb_range, self.comb_range + 1)    
			self.cv_sample.Sample_comb_vectors(self.comb_range, self.comb_range - 1,comb((self.comb_range, self.comb_range - 1) + 1))            	self.cv_sample.Sample_comb_vectors(self.comb_range, self.comb_range - 1, 0)  
			
	# @unittest.skip("I don't want to run this case.")
	def test_vectors_sample_type_error(self):  
		with self.assertRaises(TypeError):      
			self.cv_sample.Sample_comb_vectors('x')    
			self.cv_sample.Sample_comb_vectors(6, 'y')     
			self.cv_sample.Sample_comb_vectors(6, 2, 'z')
			
if __name__ == '__main__':
	unittest.main()
